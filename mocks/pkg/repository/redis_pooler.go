// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/redis_pooler.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/gomodule/redigo/redis"
	reflect "reflect"
)

// MockRedisPooler is a mock of RedisPooler interface
type MockRedisPooler struct {
	ctrl     *gomock.Controller
	recorder *MockRedisPoolerMockRecorder
}

// MockRedisPoolerMockRecorder is the mock recorder for MockRedisPooler
type MockRedisPoolerMockRecorder struct {
	mock *MockRedisPooler
}

// NewMockRedisPooler creates a new mock instance
func NewMockRedisPooler(ctrl *gomock.Controller) *MockRedisPooler {
	mock := &MockRedisPooler{ctrl: ctrl}
	mock.recorder = &MockRedisPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisPooler) EXPECT() *MockRedisPoolerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRedisPooler) Get() redis.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(redis.Conn)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRedisPoolerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisPooler)(nil).Get))
}

// GetContext mocks base method
func (m *MockRedisPooler) GetContext(ctx context.Context) (redis.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", ctx)
	ret0, _ := ret[0].(redis.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext
func (mr *MockRedisPoolerMockRecorder) GetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockRedisPooler)(nil).GetContext), ctx)
}

// Stats mocks base method
func (m *MockRedisPooler) Stats() redis.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(redis.PoolStats)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockRedisPoolerMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRedisPooler)(nil).Stats))
}

// ActiveCount mocks base method
func (m *MockRedisPooler) ActiveCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// ActiveCount indicates an expected call of ActiveCount
func (mr *MockRedisPoolerMockRecorder) ActiveCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveCount", reflect.TypeOf((*MockRedisPooler)(nil).ActiveCount))
}

// IdleCount mocks base method
func (m *MockRedisPooler) IdleCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// IdleCount indicates an expected call of IdleCount
func (mr *MockRedisPoolerMockRecorder) IdleCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleCount", reflect.TypeOf((*MockRedisPooler)(nil).IdleCount))
}

// Close mocks base method
func (m *MockRedisPooler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRedisPoolerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisPooler)(nil).Close))
}
